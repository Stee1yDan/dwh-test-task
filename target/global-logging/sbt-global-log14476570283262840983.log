[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Владислав\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Владислав\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (AdoptOpenJDK Java 11.0.5)
[debug]       Load.loadUnit: plugins took 182.9882ms
[debug]       Load.loadUnit: defsScala took 0.5121ms
[debug] [Loading] Scanning directory C:\Users\Владислав\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Владислав\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 24.6299 ms
[debug]           Load.resolveProject(global-plugins) took 65.596ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Владислав\.sbt\1.0\plugins, plugins: List(<none>))) took 141.8903ms
[debug] [Loading] Done in C:\Users\Владислав\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 173.8267ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3455ms
[debug]     Load.loadUnit(file:/C:/Users/Владислав/.sbt/1.0/plugins/, ...) took 371.8555ms
[debug]   Load.apply: load took 607.1394ms
[debug]   Load.apply: resolveProjects took 6.0816ms
[debug]   Load.apply: finalTransforms took 104.1962ms
[debug]   Load.apply: config.delegates took 10.6515ms
[debug]   Load.apply: Def.make(settings)... took 585.4433ms
[debug]   Load.apply: structureIndex took 158.6375ms
[debug]   Load.apply: mkStreams took 2.2815ms
[info] loading global plugins from C:\Users\Владислав\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3701.6704ms
[debug]           Load.loadUnit: plugins took 33.9885ms
[debug]           Load.loadUnit: defsScala took 0.0059ms
[debug] [Loading] Scanning directory C:\factor\IdeaProjects\HomeWork2\project
[debug]             Load.loadUnit: mkEval took 10.5919ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\factor\IdeaProjects\HomeWork2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.583 ms
[info] loading settings for project homework2-build from idea.sbt ...
[debug]               Load.resolveProject(homework2-build) took 9.2924ms
[debug]             Load.loadTransitive: finalizeProject(Project(id homework2-build, base: C:\factor\IdeaProjects\HomeWork2\project, plugins: List(<none>))) took 12.6797ms
[debug] [Loading] Done in C:\factor\IdeaProjects\HomeWork2\project, returning: (homework2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6411.0923ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.0451ms
[debug]         Load.loadUnit(file:/C:/factor/IdeaProjects/HomeWork2/project/, ...) took 6454.37ms
[debug]       Load.apply: load took 6456.2753ms
[debug]       Load.apply: resolveProjects took 0.1557ms
[debug]       Load.apply: finalTransforms took 17.0799ms
[debug]       Load.apply: config.delegates took 0.9983ms
[debug]       Load.apply: Def.make(settings)... took 142.6672ms
[debug]       Load.apply: structureIndex took 47.2444ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\factor\IdeaProjects\HomeWork2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 10884.9685ms
[debug]     Load.loadUnit: defsScala took 0.0067ms
[debug] [Loading] Scanning directory C:\factor\IdeaProjects\HomeWork2
[debug]       Load.loadUnit: mkEval took 0.4885ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 39.2544 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 456.8786ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\factor\IdeaProjects\HomeWork2, plugins: List(<none>))) took 540.7798ms
[debug] [Loading] Done in C:\factor\IdeaProjects\HomeWork2, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 6873.8866ms
[debug]     Load.loadUnit: cleanEvalClasses took 164.1052ms
[debug]   Load.loadUnit(file:/C:/factor/IdeaProjects/HomeWork2/, ...) took 17925.6795ms
[debug] Load.apply: load took 17938.6552ms
[debug] Load.apply: resolveProjects took 0.2087ms
[debug] Load.apply: finalTransforms took 64.7555ms
[debug] Load.apply: config.delegates took 0.5795ms
[debug] Load.apply: Def.make(settings)... took 196.5545ms
[debug] Load.apply: structureIndex took 48.4331ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to test-project (in build file:/C:/factor/IdeaProjects/HomeWork2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59896 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59896, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to test-project (in build file:/C:/factor/IdeaProjects/HomeWork2/)
[debug] > Exec(idea-shell, None, None)
